Go, el reemplazo definitivo de C?
75.24 - Teoría de Lenguajes

* Integrantes :
- Lucas Perea
- Nicolas Ledesma
- Federico Longhi
- Alexis Daciuk

* Origen 
Anunciado en noviembre del 2009, Go nació como un experimento de Robert Griesemer y Rob Pike, ingenieros de Google, junto a Ken Thompson (creador del Lenguaje de programación B, predecesor de C), con el objetivo de diseñar un lenguaje que resuelva problemas comunes de otros lenguajes de programación, sin perder sus características útiles.

Características planeadas del nuevo lenguaje:

- Estáticamente tipado.
- Productivo (?) y fácil de leer, sin mucha repetición ni demasiadas palabras reservadas.
- Sin necesidad de un IDE.
- Con soporte de redes (?) y concurrencia.

En entrevistas posteriores, los 3 creadores comentaron su desagrado de C++, por su innecesaria complejidad.

* Características básicas
- Paradigma: Compilado, concurrente, imperativo, estructurado
- Tipado: fuerte, estático, inferido, estructurado

* Cosas curiosas
* Caso curioso 1

Los "métodos" de Go y sus argumentos:

Go permite definir funciones que se aplican sobre instancias de tipos o estructuras.

.play code/impossibru.go /START OMIT/,/END OMIT/

* ¿Qué hicimos mal? 

.image images/impossibru.png

* ¿Por qué?

- Los "métodos" en realidad son funciones con un argumento vinculado a una instancia de una estructura o un valor.
- Todas las funciones en Go reciben sus argumentos como copia del valor.
- En este caso modificamos la copia de jimmy, pero no a jimmy.

¿Cómo se utilizan entonces los "métodos" de Go?

Si una función modifica un valor y se quiere que ese cambio persista fuera de la función hay dos opciones:

1. Se retorna el valor modificado
2. En lugar de recibir el valor, que la función reciba un punteros

Go permite usar punteros de forma bastante simple. 

* "Métodos" con punteros

No hace falta crear un puntero a 'musician'. Go permite saltearse ese paso, sólo hace falta definir que la función reciba un puntero. 
.play code/impossibru2.go /START OMIT/,/END OMIT/


* Cosas copadas (sujeto a cambios)
- Inferencia de tipos.
- Binarios linkeados estáticamente, es decir, sin dependencias externas.
- AGREGAR MAS.


* Cuando usar Go



* Cuando no usar Go



* Estadísticas
Top 5 frameworks (según las estadísticas de golanglibs.com)

    - node_exporter : para manejar métricas.
    - stats : Paquete con funciones estadísticas. 
    - gonum : Conjunto de bibliotecas numéricas.
    - bayesian : Clasificador Bayesiano ingenuo.
    - prometheus-operator : Biblioteca para manejar Clusters Prometheus sobre Kubernetes.

Uso (según OpenHub.net)

    - Proyectos : 2 677.
    - Lineas : 122 943 230 de las cuales, 93 518 418 son de código y 17 313 977 son comentarios.
    - Personas contribuyendo : 18 044.
    - Commits : 803 563. 

A Septiembre de 2017, según el ranking TIOBE de popularidad, Go esta en el puesto 17, ascendiendo 2 puestos con respecto al mismo mes del año pasado, en 2016 fue en lenguaje que más popularidad gano.

* Comparación con lenguajes populares

Go vs NodeJS

    - Madurez : Ambos proyectos son bastante maduros, aunque la API de Node esta en constante cambio, eso puede traer problemas a futuro futuro
    - Rendimiento : Go tiene un rendimiento similar a C y C++ (es decir, bastante bueno) mientras Node, al ser Javascript dinamicamente tipado, no alcanza el nivel de rendimiento de Go. dinamicamente tipado, no alcanza el nivel de rendimiento de Go.
    - Concurrencia : Go usa `goroutines` para concurrencia, que se clasifica como green-threads (segun lo que vimos en clase), mientras Node usa event-callbacks (agregar mas sobre concurrencia en js) mientras Node usa event-callbacks (agregar mas sobre concurrencia en js)
    - 